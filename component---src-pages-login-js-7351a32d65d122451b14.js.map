{"version":3,"sources":["webpack:///./src/components/auth/login.js","webpack:///./src/pages/login.js","webpack:///./node_modules/bignumber.js/bignumber.js"],"names":["web4","Web3","config","provider","contract","eth","Contract","contractAbi","contractAddress","Login","useState","userInputId","setUserInputId","send","setSend","getUp","setGetUp","pass","setPass","userInputPass","setUserInputPass","useEffect","handleOneClickLogin","a","window","ethereum","web3","enable","acc","methods","us","call","x","Cookies","set","navigate","toast","error","handleLoginManually","console","log","utils","isAddress","address","toString","className","id","defaultMessage","onClick","color","size","type","name","value","onChange","e","target","style","width","injectIntl","location","Auth","title","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","s","z","j","length","r","charCodeAt","slice","compare","y","b","xc","c","yc","k","l","intCheck","min","max","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON"],"mappings":"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","file":"component---src-pages-login-js-7351a32d65d122451b14.js","sourcesContent":["import React from 'react'\nimport {useState,useEffect} from 'react'\nimport {Container,Title,CopyCom} from '../common'\nimport {injectIntl,FormattedMessage} from 'gatsby-plugin-intl'\nimport { navigate } from 'gatsby'\nimport config from '../../libs/config'\nimport contractAbi from '../../libs/abi'\nimport Cookies from 'js-cookie'\nimport Web3 from 'web3'\nimport Skeleton from '../skeleton'\nimport {PulseLoader,BeatLoader,BounceLoader} from 'react-spinners'\nimport {toast} from 'react-toastify'\nimport BigNumber from 'bignumber.js'\nconst web4 = new Web3(config.provider);\nconst contract = new web4.eth.Contract(contractAbi,config.contractAddress);\nconst reg = /^[0-9]+$/;\nconst Login = () => {\n    const [userInputId,setUserInputId] = useState('');\n    const [send,setSend] = useState(false);\n    const [getUp,setGetUp] = useState(false);\n    const [pass,setPass] = useState(false);\n    const [userInputPass,setUserInputPass] = useState('');\n    useEffect(()=>{\n    },[null])\n    const handleLoginManuallyPass = () => {\n        console.log(userInputPass);\n        console.log(config.pass)\n        console.log(userInputPass == config.pass)\n        setGetUp(true);\n        if (!send){\n            if (userInputPass !== config.pass){\n                setGetUp(false);\n                return toast.error(\"Wrong password.\")\n            } else {\n                Cookies.set('user',userInputId);\n                navigate('/db/dashboard');\n                setGetUp(false);\n            }\n        }\n    }\n    const handleOneClickLogin =async () => {\n        if (window.ethereum && !send){\n            setSend(true);\n            window.web3 = new Web3(window.ethereum);\n            try {\n                const acc = await window.ethereum.enable();\n                if (acc && acc[0]){\n                    const address = await contract.methods.us(acc[0]).call();\n                    if (address.x){\n                        Cookies.set('user',acc[0]);\n                        navigate('/db/dashboard/');\n                        setGetUp(false);\n                    } else {\n                        toast.error(\"Your ethereum address not found in contract.\")\n                        setGetUp(false);\n                    }\n                } else {\n                    toast.error('Can not access your ethereum address');\n                }\n                setSend(false);\n            } catch(error){\n                setSend(false);\n            }\n        } else {\n            setSend(false);\n        }\n    }\n    const handleLoginManually = async () => {\n        console.log('click')\n        if (!getUp){\n            setGetUp(true);\n            if (web4.utils.isAddress(userInputId)){\n                const address = await contract.methods.us(userInputId).call();\n                if (address.x){\n                    console.log(address.a.toString())\n                    if (address.a.toString() == 1 || address.a.toString() == 2 || address.a.toString() == 3 || address.a.toString() == 4){\n                        setPass(true);\n                        setGetUp(false);                        \n                    } else {\n                        Cookies.set('user',userInputId);\n                        navigate('/db/dashboard');\n                        setGetUp(false);\n                    }\n                } else {\n                    toast.error(\"Invalid ethereum address.\")\n                    setGetUp(false);\n                }\n            } else {\n                toast.error(\"Invalid ethereum address.\");\n                setGetUp(false);\n            }\n        }\n    }\n    return (\n        <div className=\"lg-350 mx-auto\">\n            <Title>\n                <span className=\"text-lights-orange\">Log </span>\n                in\n            </Title>\n            <div className=\"font-sans font-semibold text-14 text-lights-bluebold mb-8 text-center\">\n                <FormattedMessage id=\"auth.block1.never\" defaultMessage=\"We never ask you to enter your private keys.\" />\n            </div>\n            <div className=\"mb-4 text-center\">\n                <button className=\"w-full py-2 text-lights-white font-semibold focus:outline-none bg-lights-bluebold rounded-lg flex items-center justify-center\" onClick={handleOneClickLogin}>\n                    {!send?<span className=\"mx-auto\"><FormattedMessage id=\"auth.block1.btn\" defaultMessage=\"LOGIN AUTOMATICALLY\" /></span>:\n                        <span className=\"mx-auto\"><BounceLoader color=\"#fff\" size={24}/></span>\n                    }\n                </button>\n            </div>\n            <div className=\"text-center mb-4 text-lights-bluebold font-sans font-semibold\">\n                <FormattedMessage id=\"auth.block1.or\" defaultMessage=\"or\"/>\n            </div>\n            {pass ? (\n                <>\n                    <div className=\"mb-4\">\n                        <div className=\"font-sans font-semibold italic text-14 text-lights-bluebold mb-2 leading-none\">\n                            Enter password\n                        </div>\n                        <input type=\"password\" name=\"password\" className=\"block w-full px-2 py-2 focus:outline-none border rounded-lg text-lights-bluebold text-14 font-sans font-semibold\" value={userInputPass} onChange={(e)=>setUserInputPass(e.target.value)}/>\n                    </div>\n                    <div className=\"text-center\">\n                        <button className=\"flex items-center justify-center mx-auto px-4 py-2 bg-lights-orange text-lights-bluebold text-14 font-semibold rounded-lg focus:outline-none\" onClick={handleLoginManuallyPass} style={{width: '160px'}}>\n                        { !getUp?\n                            <span className=\"mx-auto\">LOGIN</span>:\n                            <span className=\"mx-auto\"><BounceLoader color=\"#fff\" size={24}/></span>\n                        }\n                        </button>\n                    </div>\n                </>\n            ):(\n                <>\n                    <div className=\"mb-4\">\n                        <div className=\"font-sans font-semibold italic text-14 text-lights-bluebold mb-2 leading-none\">\n                            <FormattedMessage id=\"auth.block1.eth\" defaultMessage=\"Your ETH-address\" />\n                        </div>\n                        <input type=\"text\" name=\"ethAddress\" className=\"block w-full px-2 py-2 focus:outline-none border rounded-lg text-lights-bluebold text-14 font-sans font-semibold\" value={userInputId} onChange={(e)=>setUserInputId(e.target.value)}/>\n                    </div>\n                    <div className=\"text-center\">\n                        <button className=\"flex items-center justify-center mx-auto px-4 py-2 bg-lights-orange text-lights-bluebold text-14 font-semibold rounded-lg focus:outline-none\" onClick={handleLoginManually} style={{width: '160px'}}>\n                        { !getUp?\n                            <span className=\"mx-auto\"><FormattedMessage id=\"auth.block1.btn2\" defaultMessage=\"LOGIN MANUALLY\"/></span>:\n                            <span className=\"mx-auto\"><BounceLoader color=\"#fff\" size={24}/></span>\n                        }\n                        </button>\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\nconst Block1 = ({location}) => {\n    return (\n        <Container>\n            <div className=\"md:flex lg:w-4/5 lg:mx-auto\">\n                <div className=\"md:w-1/2 mb-8 md:mb-0 md:px-4 mx-auto\">\n                    <Login />                    \n                </div>\n            </div>\n        </Container>\n    )\n}\nexport default injectIntl(Block1)","import React from 'react'\nimport Layout from '../components/layout'\nimport Block1 from '../components/auth/login'\nimport Seo from '../components/seo'\n\nconst Auth = () => {\n    return (\n        <Layout>\n            <Seo title=\"Login - SignUp\"/>\n            <Block1 />\n        </Layout>\n    )\n}\n\nexport default Auth","require(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.typed.uint32-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\n;\n\n(function (globalObject) {\n  'use strict';\n  /*\r\n   *      bignumber.js v9.0.0\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n      // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n        ONE = new BigNumber(1),\n        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      suffix: ''\n    },\n        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n\n    function BigNumber(v, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this; // Enable constructor call without `new`.\n\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++) {\n              ;\n            }\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        } // Decimal point?\n\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n\n        if (b == 10) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0; // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        } // Prevent later check for length on converted number.\n\n\n        isNum = false;\n        str = convertBase(str, b, 10, x.s); // Decimal point?\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++) {\n        ;\n      } // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;) {\n        ;\n      }\n\n      if (str = str.slice(i, ++len)) {\n        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        } // Overflow?\n\n\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0') {\n            ;\n          }\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          } // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          } // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n\n\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          } // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          } // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p]; // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n\n\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n          n,\n          c = v.c,\n          e = v.e,\n          s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            } // Last element cannot be zero, unless it is the only element.\n\n\n            if (n !== 0) return true;\n          }\n        } // Infinity/NaN\n\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--) {\n          ;\n        } // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) {\n            ;\n          } // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {\n            ;\n          } // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n\n      for (; i < args.length;) {\n        sum = sum.plus(args[i++]);\n      }\n\n      return sum;\n    }; // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n\n\n    convertBase = function () {\n      var decimal = '0123456789';\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {\n            ;\n          }\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      } // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE; // Non-integer.\n\n        if (i >= 0) {\n          k = POW_PRECISION; // Unlimited precision.\n\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        } // Convert the number as integer.\n\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n        e = k = xc.length; // Remove trailing zeros.\n\n        for (; xc[--k] == 0; xc.pop()) {\n          ;\n        } // Zero?\n\n\n        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e; // The sign is needed for correct rounding.\n\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        } // xc now represents str converted to baseOut.\n        // THe index of the rounding digit.\n\n\n        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d; // Round up?\n\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          } // Determine trailing zeros.\n\n\n          for (k = xc.length; !xc[--k];) {\n            ;\n          } // E.g. [4, 11, 15] becomes 4bf.\n\n\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) {\n            ;\n          } // Add leading zeros, decimal point and trailing zeros as required.\n\n\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        } // The caller will add the sign.\n\n\n        return str;\n      };\n    }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1)) {\n          ;\n        }\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++) {\n          ;\n        }\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0) {\n            ;\n          }\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {\n            ;\n          }\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n\n\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++) {\n            ;\n          }\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0'); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0') {\n              ;\n            }\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0') {\n                ;\n              }\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()) {\n        ;\n      } // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++) {\n        ;\n      } // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          } // NaN\n\n\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      };\n    }();\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {\n            ;\n          }\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0)) {\n                  ;\n                }\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++) {\n                ;\n              } // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {\n                  ;\n                }\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++) {\n                  ;\n                } // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop()) {\n            ;\n          }\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {\n        ;\n      }\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n\n\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n\n\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n\n\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n\n\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0) {\n        ;\n      }\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b) {\n            ;\n          }\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye) {\n        ;\n      } // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n\n\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0)) {\n        ;\n      }\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--) {\n          ;\n        } // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++) {\n          ;\n        }\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n\n\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n\n      return format(this, dp, rm, 1);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n\n      return format(this, dp, rm);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n\n\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s) {\n        ;\n      }\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;) {\n      ;\n    }\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n\n\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  } // Assumes finite n.\n\n\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z) {\n        ;\n      }\n\n      str = zs + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z) {\n          ;\n        }\n\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  } // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);"],"sourceRoot":""}